'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (filePath) {
  try {
    // check if file exists
    _fs2.default.statSync(filePath);
  } catch (e) {
    return {};
  }

  var fileContent = _fs2.default.readFileSync(filePath);

  var syntax = _path2.default.extname(filePath).slice(1); // remove leading .

  var ast = void 0;
  try {
    ast = _gonzalesPe2.default.parse(fileContent.toString(), { syntax: syntax });
  } catch (e) {
    // TODO: send message to tell about failure to parse css
    return null;
  }

  var ruleSets = [];

  ast.traverseByType('ruleset', function (node) {
    ruleSets.push(node);
  });

  var classNames = _fp2.default.compose(_fp2.default.map('content'), _fp2.default.filter({ type: 'ident' }), _fp2.default.flatMap('content'), _fp2.default.filter({ type: 'class' }), _fp2.default.flatMap('content'), _fp2.default.filter({ type: 'selector' }), _fp2.default.flatMap('content'))(ruleSets);

  // convert array to object, with all values undefined
  return (0, _lodash.zipObject)(classNames);
};

var _gonzalesPe = require('gonzales-pe');

var _gonzalesPe2 = _interopRequireDefault(_gonzalesPe);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fp = require('lodash/fp');

var _fp2 = _interopRequireDefault(_fp);

var _lodash = require('lodash');

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9ydWxlcy9uby11bnVzZWQtb3ItZXh0cmEtY2xhc3MvZ2V0U3R5bGVDbGFzc2VzLmpzIl0sIm5hbWVzIjpbImZpbGVQYXRoIiwic3RhdFN5bmMiLCJlIiwiZmlsZUNvbnRlbnQiLCJyZWFkRmlsZVN5bmMiLCJzeW50YXgiLCJleHRuYW1lIiwic2xpY2UiLCJhc3QiLCJwYXJzZSIsInRvU3RyaW5nIiwicnVsZVNldHMiLCJ0cmF2ZXJzZUJ5VHlwZSIsIm5vZGUiLCJwdXNoIiwiY2xhc3NOYW1lcyIsImNvbXBvc2UiLCJtYXAiLCJmaWx0ZXIiLCJ0eXBlIiwiZmxhdE1hcCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O2tCQXFCZSxVQUFVQSxRQUFWLEVBQXdEO0FBQ3JFLE1BQUk7QUFDRjtBQUNBLGlCQUFHQyxRQUFILENBQVlELFFBQVo7QUFDRCxHQUhELENBR0UsT0FBT0UsQ0FBUCxFQUFVO0FBQ1YsV0FBTyxFQUFQO0FBQ0Q7O0FBRUQsTUFBTUMsY0FBYyxhQUFHQyxZQUFILENBQWdCSixRQUFoQixDQUFwQjs7QUFFQSxNQUFNSyxTQUFTLGVBQUtDLE9BQUwsQ0FBYU4sUUFBYixFQUF1Qk8sS0FBdkIsQ0FBNkIsQ0FBN0IsQ0FBZixDQVZxRSxDQVVyQjs7QUFFaEQsTUFBSUMsWUFBSjtBQUNBLE1BQUk7QUFDRkEsVUFBTSxxQkFBU0MsS0FBVCxDQUFlTixZQUFZTyxRQUFaLEVBQWYsRUFBdUMsRUFBRUwsY0FBRixFQUF2QyxDQUFOO0FBQ0QsR0FGRCxDQUVFLE9BQU9ILENBQVAsRUFBVTtBQUNWO0FBQ0EsV0FBTyxJQUFQO0FBQ0Q7O0FBRUQsTUFBTVMsV0FBNEIsRUFBbEM7O0FBRUFILE1BQUlJLGNBQUosQ0FBbUIsU0FBbkIsRUFBOEIsVUFBQ0MsSUFBRCxFQUFVO0FBQ3RDRixhQUFTRyxJQUFULENBQWNELElBQWQ7QUFDRCxHQUZEOztBQUlBLE1BQU1FLGFBQTRCLGFBQUdDLE9BQUgsQ0FDaEMsYUFBR0MsR0FBSCxDQUFPLFNBQVAsQ0FEZ0MsRUFFaEMsYUFBR0MsTUFBSCxDQUFVLEVBQUVDLE1BQU0sT0FBUixFQUFWLENBRmdDLEVBR2hDLGFBQUdDLE9BQUgsQ0FBVyxTQUFYLENBSGdDLEVBSWhDLGFBQUdGLE1BQUgsQ0FBVSxFQUFFQyxNQUFNLE9BQVIsRUFBVixDQUpnQyxFQUtoQyxhQUFHQyxPQUFILENBQVcsU0FBWCxDQUxnQyxFQU1oQyxhQUFHRixNQUFILENBQVUsRUFBRUMsTUFBTSxVQUFSLEVBQVYsQ0FOZ0MsRUFPaEMsYUFBR0MsT0FBSCxDQUFXLFNBQVgsQ0FQZ0MsRUFRaENULFFBUmdDLENBQWxDOztBQVVBO0FBQ0EsU0FBTyx1QkFBVUksVUFBVixDQUFQO0FBQ0QsQzs7QUExREQ7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7O0FBQ0EiLCJmaWxlIjoiZ2V0U3R5bGVDbGFzc2VzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cbmltcG9ydCBnb256YWxlcyBmcm9tICdnb256YWxlcy1wZSc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBmcCBmcm9tICdsb2Rhc2gvZnAnO1xuaW1wb3J0IHsgemlwT2JqZWN0IH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5cbnR5cGUgTm9kZVR5cGUgPSB7XG4gIHR5cGU6ICdpZGVudCcsXG4gIGNvbnRlbnQ6IEFycmF5PE5vZGVUeXBlPiB8IHN0cmluZyxcbiAgc3ludGF4OiBzdHJpbmcsXG4gIHN0YXJ0OiB7XG4gICAgbGluZTogbnVtYmVyLFxuICAgIGNvbHVtbjogbnVtYmVyLFxuICB9LFxuICBlbmQ6IHtcbiAgICBsaW5lOiBudW1iZXIsXG4gICAgY29sdW1uOiBudW1iZXIsXG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoZmlsZVBhdGg6IHN0cmluZyk6ID97W2tleTogc3RyaW5nXTogP2Jvb2xlYW59IHtcbiAgdHJ5IHtcbiAgICAvLyBjaGVjayBpZiBmaWxlIGV4aXN0c1xuICAgIGZzLnN0YXRTeW5jKGZpbGVQYXRoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGNvbnN0IGZpbGVDb250ZW50ID0gZnMucmVhZEZpbGVTeW5jKGZpbGVQYXRoKTtcblxuICBjb25zdCBzeW50YXggPSBwYXRoLmV4dG5hbWUoZmlsZVBhdGgpLnNsaWNlKDEpOyAvLyByZW1vdmUgbGVhZGluZyAuXG5cbiAgbGV0IGFzdDtcbiAgdHJ5IHtcbiAgICBhc3QgPSBnb256YWxlcy5wYXJzZShmaWxlQ29udGVudC50b1N0cmluZygpLCB7IHN5bnRheCB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIFRPRE86IHNlbmQgbWVzc2FnZSB0byB0ZWxsIGFib3V0IGZhaWx1cmUgdG8gcGFyc2UgY3NzXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBydWxlU2V0czogQXJyYXk8Tm9kZVR5cGU+ID0gW107XG5cbiAgYXN0LnRyYXZlcnNlQnlUeXBlKCdydWxlc2V0JywgKG5vZGUpID0+IHtcbiAgICBydWxlU2V0cy5wdXNoKG5vZGUpO1xuICB9KTtcblxuICBjb25zdCBjbGFzc05hbWVzOiBBcnJheTxzdHJpbmc+ID0gZnAuY29tcG9zZShcbiAgICBmcC5tYXAoJ2NvbnRlbnQnKSxcbiAgICBmcC5maWx0ZXIoeyB0eXBlOiAnaWRlbnQnIH0pLFxuICAgIGZwLmZsYXRNYXAoJ2NvbnRlbnQnKSxcbiAgICBmcC5maWx0ZXIoeyB0eXBlOiAnY2xhc3MnIH0pLFxuICAgIGZwLmZsYXRNYXAoJ2NvbnRlbnQnKSxcbiAgICBmcC5maWx0ZXIoeyB0eXBlOiAnc2VsZWN0b3InIH0pLFxuICAgIGZwLmZsYXRNYXAoJ2NvbnRlbnQnKSxcbiAgKShydWxlU2V0cyk7XG5cbiAgLy8gY29udmVydCBhcnJheSB0byBvYmplY3QsIHdpdGggYWxsIHZhbHVlcyB1bmRlZmluZWRcbiAgcmV0dXJuIHppcE9iamVjdChjbGFzc05hbWVzKTtcbn1cbiJdfQ==